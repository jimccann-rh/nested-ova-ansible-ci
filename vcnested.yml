---

- name: List hosts in ESXi
  ansible.builtin.debug:
    msg: "Host: {{ item }}"
  loop: "{{ groups['esxi'] }}"

- name: List hosts in VC
  ansible.builtin.debug:
    msg: "Host: {{ item }}"
  loop: "{{ groups['vc'] }}"

- name: Set vc name
  ansible.builtin.set_fact:
    host_fact_hostname: "{{ hostvars[groups['vc'][my_idx_vc]].inventory_hostname }}"

- name: Setting host facts
  ansible.builtin.set_fact:
    vmkguest: "vmkernel8Guest"
  when: '"8" in version'

- name: Setting host facts
  ansible.builtin.set_fact:
    vmkguest: "vmkernel7Guest"
  when: '"7" in version'

- name: VC Exists
  block:

    - name: "DELETE virtual machine {{ host_fact_hostname }} version {{ version }}"
      community.vmware.vmware_guest:
        datacenter: "{{ vc_datacenter }}"
        folder: "{{ vc_datacenter }}/vm/{{ vc_folder }}"
        name: "{{ host_fact_hostname }}"
        state: absent
        force: true
      when: testingvc | bool

    - name: "Does VC virtual machine {{ host_fact_hostname }} exist"
      community.vmware.vmware_guest:
        datacenter: "{{ vc_datacenter }}"
        folder: "{{ vc_datacenter }}/vm/{{ vc_folder }}"
        name: "{{ host_fact_hostname }}"
        state: present

    - name: "Does VC virtual machine {{ host_fact_hostname }} exist get ip"
      community.vmware.vmware_guest_info:
        datacenter: "{{ vc_datacenter }}"
        name: "{{ host_fact_hostname }}"
        schema: vsphere
        properties:
          - guest.ipAddress
      register: nested_vm

    - name: Show ip address
      ansible.builtin.debug:
        msg: "ip is: {{ nested_vm.instance.guest.ipAddress }}"

    - name: Wait for vCenter
      community.vmware.vmware_about_info:
        hostname: '{{ nested_vm.instance.guest.ipAddress }}'
        username: 'administrator@{{ vc_fact_domain }}'
        password: "{{ vc_fact_password }}"
        validate_certs: false
      retries: 30
      delay: 60
      register: result
      until: result is succeeded

    - name: Add host to group vc
      ansible.builtin.add_host:
        name: '{{ host_fact_hostname }}'
        groups: vc
        NESTEDVMIP: "{{ nested_vm.instance.guest.ipAddress }}"
  rescue:

    - community.vmware.vmware_deploy_ovf:
        url: "http://{{ httpova }}/{{ vcenterova }}"
        datacenter: "{{ vc_datacenter }}"
        name: '{{ host_fact_hostname }}'
        enable_hidden_properties: true
        folder: "{{ vc_datacenter }}/vm/{{ vc_folder }}"
        datastore: vsanDatastore
        disk_provisioning: thin
        networks:
          "Network 1": "{{ vc_fact_deployment_network }}"
        wait_for_ip_address: true
        validate_certs: false
        inject_ovf_env: true
        properties:
          DeploymentOption.value: 'tiny' # vCenter t-shirt size: tiny,small,medium,large, or infrastructure
          guestinfo.cis.appliance.net.addr.family: 'ipv4' # ipv4 or ipv6
          guestinfo.cis.appliance.net.mode: 'dhcp' # static or dhcp
          guestinfo.cis.appliance.root.passwd: "{{ vc_fact_password }}"
          guestinfo.cis.vmdir.password: "{{ vc_fact_password }}" # SSO Password for administrator@vsphere.local
          domain: "{{ vc_fact_domain }}"
          guestinfo.cis.appliance.ssh.enabled: 'True'
          guestinfo.cis.deployment.autoconfig: 'True' # Auto-configure after deployment
          guestinfo.cis.appliance.root.shell: 'True'
#          guestinfo.cis.appliance.net.pnid: 'localhost'

      register: nested_vm

    - name: Pause while reboots itself
      ansible.builtin.pause:
        seconds: 180

    - name: Retrieve guest info
      community.vmware.vmware_guest_info:
        name: "{{ host_fact_hostname }}"
        datacenter: "{{ vc_datacenter }}"
      register: guest_info
      until: guest_info.instance.guest_tools_status == "guestToolsRunning"
      retries: 60
      delay: 30

    - name: "Does VC virtual machine {{ host_fact_hostname }} exist get ip"
      community.vmware.vmware_guest_info:
        datacenter: "{{ vc_datacenter }}"
        name: "{{ host_fact_hostname }}"
        schema: vsphere
        properties:
          - guest.ipAddress
      register: nested_vm

    - name: Add host to group vc
      ansible.builtin.add_host:
        name: '{{ host_fact_hostname }}'
        groups: vc
        NESTEDVMIP: "{{ nested_vm.instance.guest.ipAddress }}"

    - name: Show ip
      ansible.builtin.debug:
        msg: "ip is: {{ nested_vm.instance }}"

    - name: Wait for vCenter
      vmware_about_info:
        hostname: "{{ hostvars[groups['vc'][my_idx_vc]].NESTEDVMIP }}"
        username: 'administrator@{{ vc_fact_domain }}'
        password: "{{ vc_fact_password }}"
        validate_certs: false
      retries: 30
      delay: 60
      register: result
      until: result is succeeded

    - name: "Wait for {{ hostvars[groups['vc'][my_idx_vc]].inventory_hostname }} {{ nested_vm.instance.guest.ipAddress }} install of VC on host to be complete"
      ansible.builtin.wait_for:
        host: "{{ nested_vm.instance.guest.ipAddress }}"
        port: 443
        sleep: 10
        timeout: 900
