---
- name: Set up configs
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  tasks:
    - name: Needed packages on system
      ansible.builtin.include_tasks: packlocal.yml
      tags:
        - packlocal
        - never

    - name: Check if /tmp/override-vars.yaml exists
      ansible.builtin.stat:
        path: /tmp/override-vars.yaml
      register: override_file_exists

    - name: Include vars from /tmp/override-vars.yaml
      ansible.builtin.include_vars:
        file: /tmp/override-vars.yaml
      when: override_file_exists.stat.exists

    - name: Resolve installation media
      ansible.builtin.set_fact:
        esxiova: "{{ item.esxiova }}"
        vcenterova: "{{ item.vcenterova }}"
        httpova: "{{ item.httpova }}"
      when: 'item.name == version'
      loop: "{{ vc_assets | list }}"

    - name: Fail if installation media isn't resolved
      ansible.builtin.fail:
        msg: "Unable to resolve installation media. Ensure vc_assets is defined."
      when: httpova is undefined or vcenterova is undefined or esxiova is undefined

- name: Derive topology from platform spec
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  vars:
    datacenter_cnt: 0
    host_indexed_failure_domains: []

  tasks:
    - name: Get platform spec
      ansible.builtin.slurp:
        src: "{{ vc_shared_dir }}/nested-ansible-platform.yaml"
      register: platform_spec_yaml

    - name: Parse platform spec
      ansible.builtin.set_fact:
        platform_spec: '{{ platform_spec_yaml.content | b64decode | from_yaml }}'

    - name: Set topology facts
      ansible.builtin.set_fact:
        vcenters: '{{ platform_spec.platform.vsphere.vcenters }}'
        vcenter_cnt: '{{ platform_spec.platform.vsphere.vcenters | length }}'
        datacenter_cnt: '{{ (datacenter_cnt | int) + (platform_spec.platform.vsphere.vcenters[my_idx].datacenters | length) }}'
      loop: "{{ platform_spec.platform.vsphere.vcenters | list }}"
      loop_control:
        loop_var: loop_bms
        index_var: my_idx

    - name: Show topology facts
      ansible.builtin.debug:
        msg: "***** {{ datacenter_cnt }} datacenters *****"

    # by default, each failure domain gets a single host. the HOSTS_PER_FAILURE_DOMAIN
    # can be used to set the number of hosts.
    - name: Update failure domains to account for additional hosts
      ansible.builtin.set_fact:
        host_indexed_failure_domains: "{{ host_indexed_failure_domains + platform_spec.platform.vsphere.failureDomains }}"
      with_sequence: start=1 end="{{ vc_hosts_per_failure_domain }}"

    - name: Initialize ESXi hosts in hostvars
      ansible.builtin.add_host:
        name: '{{ vc_cluster_name }}-{{ my_idx + 1 }}'
        groups: esxi
        inventory_hostname: '{{ vc_cluster_name }}-{{ my_idx + 1 }}'
      loop: "{{ host_indexed_failure_domains | list }}"
      loop_control:
        loop_var: loop_bms
        index_var: my_idx
  tags:
    - always

- name: Set up nested hosts
  hosts: localhost
  connection: local
  become: false
  gather_facts: false

  module_defaults:
    group/vmware:
      hostname: "{{ vc_hostname }}"
      username: "{{ vc_username }}"
      password: "{{ vc_password }}"
      validate_certs: false
  vars:
    host_count_var: "{{ host_indexed_failure_domains | length }}"

  tasks:
    - name: Provision ESXi VMs
      ansible.builtin.include_tasks: esxinested.yml
      loop: "{{ host_indexed_failure_domains | list }}"
      vars:
        testingvc: false
        testingesxi: false
        esximemory: "{{ ((vc_allocated_memory | int) / (host_count_var | int)) | int }}"
        esxicpu: "{{ ((vc_allocated_vcpus | int) / (host_count_var | int)) | int }}"
        esxidisk: "{{ ((vc_allocated_disk | int) / (host_count_var | int)) | int }}"
      loop_control:
        loop_var: loop_bms
        index_var: my_idx

- name: Provision vCenters
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  module_defaults:
    group/vmware:
      hostname: "{{ vc_hostname }}"
      username: "{{ vc_username }}"
      password: "{{ vc_password }}"
      validate_certs: false
  tasks:
    - name: Provision vCenter VMs
      ansible.builtin.include_tasks: vcnested.yml
      loop: "{{ vcenters | list }}"
      vars:
        testingvc: false
      loop_control:
        loop_var: vcenter
        index_var: vcenter_idx

    - name: Get CA certificates
      ansible.builtin.include_tasks: getcerts.yml
      loop: '{{ groups["vc"] | list }}'
      loop_control:
        loop_var: vcenter
        index_var: vcenter_idx

- name: Configure topology
  hosts: localhost
  connection: local
  gather_facts: false
  serial: 1
  vars:
    bootstrap: true
    nfsetup: true
    nfsiso: false
    localcy: false
    failure_domains: "{{ platform_spec.platform.vsphere.failureDomains }}"
  tags:
    - hostvcenter

  tasks:
    - name: Add host to vcenter
      ansible.builtin.include_tasks: addhosts_vcenter.yml
      loop: "{{ groups['vc'] | list }}"
      loop_control:
        loop_var: vcenter
        index_var: vcenter_idx

    - name: Create DVS for vCenters and attaching hosts
      ansible.builtin.include_tasks: dvs_hosts_vcenter.yml
      loop: "{{ groups['vc'] | list }}"
      loop_control:
        loop_var: vcenter
        index_var: vcenter_idx

    - name: Create tags and attach to failure domain assets
      ansible.builtin.include_tasks: tagging.yml
      loop: "{{ groups['vc'] | list }}"
      loop_control:
        loop_var: vcenter
        index_var: vcenter_idx
      when: vc_skip_tagging != "true"

    - name: Assign hosts to host groups
      ansible.builtin.include_tasks: host_groups.yml
      loop: "{{ groups['vc'] | list }}"
      loop_control:
        loop_var: vcenter
        index_var: vcenter_idx

    - name: Dump inventory
      ansible.builtin.copy:
        content: "{{ hostvars | to_json }}"
        dest: "{{ vc_shared_dir }}/nested-inventory.json"
        mode: '0644'
