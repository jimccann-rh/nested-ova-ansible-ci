---
- name: Configure topology
  run_once: true
  vars:
    vcenter_failure_domains: []
  block:
    - name: Display vCenter facts
      ansible.builtin.debug:
        msg:
          - "{{ vcenter }}"

    - name: Get failure domains associated with the vCenter
      ansible.builtin.set_fact:
        vcenter_failure_domains: "{{ vcenter_failure_domains + [failure_domains_loop_var] }}"
      when: "failure_domains_loop_var.server == vcenter"
      loop: "{{ failure_domains }}"
      loop_control:
        loop_var: failure_domains_loop_var

    - name: Get datacenters associated with the vCenter
      ansible.builtin.set_fact:
        vcenter_datacenters: "{{ platform_spec_vcenters_loop_var.datacenters }}"
      when: "platform_spec_vcenters_loop_var.server == vcenter"
      loop: "{{ platform_spec.platform.vsphere.vcenters }}"
      loop_control:
        loop_var: platform_spec_vcenters_loop_var

- name: Configure topology
  run_once: true
  module_defaults:
    group/vmware:
      hostname: "{{ hostvars[groups['vc'][vcenter_idx]].NESTEDVMIP }}"
      username: 'administrator@{{ vc_fact_domain }}'
      password: "{{ vc_fact_password }}"
      validate_certs: false
  block:
    - name: Create Datacenter
      community.vmware.vmware_datacenter:
        datacenter_name: '{{ item }}'
        state: present
      loop: "{{ vcenter_datacenters }}"

    - name: Create Cluster
      community.vmware.vmware_cluster:
        datacenter_name: '{{ item.topology.datacenter }}'
        cluster_name: '{{ item.topology.computeCluster.split("/")[-1] }}'
      when: "item.server == vcenter"
      loop: "{{ vcenter_failure_domains }}"

    - name: Enable DRS and set default VM behavior to fully automated
      community.vmware.vmware_cluster_drs:
        enable: true
        drs_default_vm_behavior: fullyAutomated
        datacenter: '{{ item.topology.datacenter }}'
        cluster_name: '{{ item.topology.computeCluster.split("/")[-1] }}'
      when: "item.server == vcenter"
      loop: "{{ vcenter_failure_domains }}"

    - name: Set advs
      ansible.builtin.set_fact:
        advs: { "das.ignoreInsufficientHbDatastore": "True", "das.ignoreRedundantNetWarning": "True" }

    - name: Enable HA without admission control
      community.vmware.vmware_cluster_ha:
        datacenter: '{{ item.topology.datacenter }}'
        cluster_name: '{{ item.topology.computeCluster.split("/")[-1] }}'
        enable: true
        advanced_settings: "{{ advs }}"
      when: "item.server == vcenter"
      loop: "{{ vcenter_failure_domains }}"

- name: Set up hosts
  run_once: true
  vars:
    host_vmhbas: []
    hosts_in_vcenter: []
  module_defaults:
    group/vmware:
      hostname: "{{ hostvars[groups['vc'][vcenter_idx]].NESTEDVMIP }}"
      username: 'administrator@{{ vc_fact_domain }}'
      password: "{{ vc_fact_password }}"
      validate_certs: false
  block:
    - name: "Build Host Slice to be added to vCenter"
      ansible.builtin.set_fact:
        hosts_in_vcenter: "{{ hosts_in_vcenter + [hostvars[groups['esxi'][fd_idx]].NESTEDVMIP] }}"
      when: "item.server == vcenter"
      loop: "{{ host_indexed_failure_domains }}"
      loop_control:
        index_var: fd_idx

    - name: "Build ESXi to vCenter Mapping"
      ansible.builtin.set_fact:
        vc_vcenter_host_map: "{{ vc_vcenter_host_map | default({}) | combine({vcenter: hosts_in_vcenter}) }}"
      when: "item.server == vcenter"
      loop: "{{ vcenter_failure_domains }}"

    - name: "Add ESXi Host {{ hostvars[groups['esxi'][vcenter_idx]].NESTEDVMIP }} to vCenter {{ hostvars[groups['vc'][vcenter_idx]].NESTEDVMIP }}"
      community.vmware.vmware_host:
        datacenter: '{{ item.topology.datacenter }}'
        cluster: '{{ item.topology.computeCluster.split("/")[-1] }}'
        esxi_username: "root"
        esxi_password: "{{ vc_fact_password }}"
        esxi_hostname: "{{ hostvars[groups['esxi'][fd_idx]].NESTEDVMIP }}"
        state: present
      when: "item.server == vcenter"
      loop: "{{ host_indexed_failure_domains }}"
      loop_control:
        index_var: fd_idx

    - name: Set the Power Management Policy of all host systems from cluster to high-performance
      community.vmware.vmware_host_powermgmt_policy:
        cluster_name: '{{ item.topology.computeCluster.split("/")[-1] }}'
        policy: high-performance
      when: "item.server == vcenter"
      loop: "{{ vcenter_failure_domains }}"

    - name: Update for system defaults config
      community.vmware.vmware_host_auto_start:
        system_defaults:
          enabled: true
          start_delay: 100
          stop_action: guestShutdown
          wait_for_heartbeat: true
        esxi_hostname: "{{ hostvars[groups['esxi'][fd_idx]].NESTEDVMIP }}"
      when: "item.server == vcenter"
      loop: "{{ host_indexed_failure_domains }}"
      loop_control:
        index_var: fd_idx

    - name: Get host facts
      register: host_facts
      community.vmware.vmware_host_facts:
        esxi_hostname: "{{ hostvars[groups['esxi'][fd_idx]].NESTEDVMIP }}"
      when: "item.server == vcenter"
      loop: "{{ host_indexed_failure_domains }}"
      loop_control:
        index_var: fd_idx

    - name: Display host facts
      ansible.builtin.debug:
        msg:
          - "{{ host_facts }}"

    - name: Rescan HBA's for a given cluster - all found hosts will be scanned
      community.vmware.vmware_host_scanhba:
        cluster_name: '{{ item.topology.computeCluster.split("/")[-1] }}'
        refresh_storage: true
      when: "item.server == vcenter"
      loop: "{{ vcenter_failure_domains }}"

    - name: Gather info about vmhbas of hosts in the cluster
      community.vmware.vmware_host_disk_info:
        cluster_name: '{{ item.topology.computeCluster.split("/")[-1] }}'
      when: "item.server == vcenter"
      loop: "{{ vcenter_failure_domains }}"
      register: host_vmhbas

    - name: Debug multi
      ansible.builtin.debug:
        msg:
          - "{{ item }}"
      loop: "{{ host_vmhbas['results'] }}"

    - name: Create host datastore
      vars:
        esxip: "{{ item['hosts_disk_info'] | list | first }}"
        host_vmhba: "{{ item['hosts_disk_info'][esxip] }}"
      when: "'hosts_disk_info' in item"
      ansible.builtin.include_tasks: create_datastore.yml
      loop: "{{ host_vmhbas['results'] }}"

    - name: Enable vMotion for Nested
      community.vmware.vmware_vmkernel:
        vswitch_name: vSwitch0
        portgroup_name: "Management Network"
        enable_vmotion: true
        esxi_hostname: "{{ hostvars[groups['esxi'][fd_idx]].NESTEDVMIP }}"
        enable_mgmt: true
        device: vmk0
        network:
          type: 'dhcp'
      when: "item.server == vcenter"
      loop: "{{ host_indexed_failure_domains }}"
      loop_control:
        index_var: fd_idx

    - name: Exit Maintenance Mode
      community.vmware.vmware_maintenancemode:
        timeout: 3600
        esxi_hostname: "{{ hostvars[groups['esxi'][fd_idx]].NESTEDVMIP }}"
        state: absent
      when: "item.server == vcenter"
      loop: "{{ host_indexed_failure_domains }}"

      loop_control:
        index_var: fd_idx

    - name: Create Resource Pool
      community.vmware.vmware_resource_pool:
        hostname: "{{ hostvars[groups['vc'][vcenter_idx]].NESTEDVMIP }}"
        password: "{{ vc_fact_password }}"
        username: 'administrator@{{ vc_fact_domain }}'
        validate_certs: false
        datacenter: '{{ item.topology.datacenter }}'
        cluster: '{{ item.topology.computeCluster.split("/")[-1] }}'
        resource_pool: 'ipi-ci-clusters'
        state: present
      when: "item.server == vcenter"
      loop: "{{ vcenter_failure_domains }}"
